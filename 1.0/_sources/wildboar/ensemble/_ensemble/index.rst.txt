:orphan:

:mod:`wildboar.ensemble._ensemble`
==================================

.. py:module:: wildboar.ensemble._ensemble


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   wildboar.ensemble._ensemble.ShapeletForestMixin
   wildboar.ensemble._ensemble.BaseShapeletForestClassifier
   wildboar.ensemble._ensemble.ShapeletForestClassifier
   wildboar.ensemble._ensemble.ExtraShapeletTreesClassifier
   wildboar.ensemble._ensemble.BaseShapeletForestRegressor
   wildboar.ensemble._ensemble.ShapeletForestRegressor
   wildboar.ensemble._ensemble.ExtraShapeletTreesRegressor
   wildboar.ensemble._ensemble.ShapeletForestEmbedding
   wildboar.ensemble._ensemble.IsolationShapeletForest



.. class:: ShapeletForestMixin

   .. method:: apply(self, x)


   .. method:: decision_function(self, x)



.. class:: BaseShapeletForestClassifier(base_estimator, *, estimator_params=tuple(), oob_score=False, n_estimators=100, max_depth=None, min_samples_split=2, n_shapelets=10, min_shapelet_size=0, max_shapelet_size=1, metric='euclidean', metric_params=None, bootstrap=True, warm_start=False, n_jobs=None, random_state=None)


   Bases: :class:`wildboar.ensemble._ensemble.ShapeletForestMixin`, :class:`sklearn.ensemble.BaggingClassifier`

   Base class for shapelet forest classifiers.

   .. warning::

      This class should not be used directly. Use derived classes
      instead.

   .. method:: predict(self, X, check_input=True)


   .. method:: predict_proba(self, x, check_input=True)


   .. method:: predict_log_proba(self, x, check_input=True)


   .. method:: fit(self, x, y, sample_weight=None, check_input=True)

      Fit a random shapelet forest classifier



.. class:: ShapeletForestClassifier(*, n_estimators=100, n_shapelets=10, max_depth=None, min_samples_split=2, min_shapelet_size=0, max_shapelet_size=1, metric='euclidean', metric_params=None, oob_score=False, bootstrap=True, warm_start=False, n_jobs=None, random_state=None)


   Bases: :class:`wildboar.ensemble._ensemble.BaseShapeletForestClassifier`

   An ensemble of random shapelet tree classifiers.

   .. rubric:: Examples

   >>> from wildboar.ensemble import ShapeletForestClassifier
   >>> from wildboar.datasets import load_synthetic_control
   >>> x, y = load_synthetic_control()
   >>> f = ShapeletForestClassifier(n_estimators=100, metric='scaled_euclidean')
   >>> f.fit(x, y)
   >>> y_hat = f.predict(x)


.. class:: ExtraShapeletTreesClassifier(*, n_estimators=100, max_depth=None, min_samples_split=2, min_shapelet_size=0, max_shapelet_size=1, metric='euclidean', metric_params=None, oob_score=False, bootstrap=True, warm_start=False, n_jobs=None, random_state=None)


   Bases: :class:`wildboar.ensemble._ensemble.BaseShapeletForestClassifier`

   An ensemble of extremely random shapelet trees for time series regression.

   .. rubric:: Examples

   >>> from wildboar.ensemble import ExtraShapeletTreesClassifier
   >>> from wildboar.datasets import load_synthetic_control
   >>> x, y = load_synthetic_control()
   >>> f = ExtraShapeletTreesClassifier(n_estimators=100, metric='scaled_euclidean')
   >>> f.fit(x, y)
   >>> y_hat = f.predict(x)


.. class:: BaseShapeletForestRegressor(base_estimator, *, estimator_params=tuple(), oob_score=False, n_estimators=100, max_depth=None, min_samples_split=2, n_shapelets=10, min_shapelet_size=0.0, max_shapelet_size=1.0, metric='euclidean', metric_params=None, bootstrap=True, warm_start=False, n_jobs=None, random_state=None)


   Bases: :class:`wildboar.ensemble._ensemble.ShapeletForestMixin`, :class:`sklearn.ensemble.BaggingRegressor`

   Base class for shapelet forest regressors.

   .. warning::

      This class should not be used directly. Use derived classes
      instead.

   .. method:: predict(self, x, check_input=True)


   .. method:: fit(self, x, y, sample_weight=None, check_input=True)

      Fit a random shapelet forest regressor



.. class:: ShapeletForestRegressor(*, n_estimators=100, n_shapelets=10, max_depth=None, min_samples_split=2, min_shapelet_size=0, max_shapelet_size=1, metric='euclidean', metric_params=None, oob_score=False, bootstrap=True, warm_start=False, n_jobs=None, random_state=None)


   Bases: :class:`wildboar.ensemble._ensemble.BaseShapeletForestRegressor`

   An ensemble of random shapelet regression trees.

   .. rubric:: Examples

   >>> from wildboar.ensemble import ShapeletForestRegressor
   >>> from wildboar.datasets import load_synthetic_control
   >>> x, y = load_synthetic_control()
   >>> f = ShapeletForestRegressor(n_estimators=100, metric='scaled_euclidean')
   >>> f.fit(x, y)
   >>> y_hat = f.predict(x)


.. class:: ExtraShapeletTreesRegressor(*, n_estimators=100, max_depth=None, min_samples_split=2, min_shapelet_size=0, max_shapelet_size=1, metric='euclidean', metric_params=None, oob_score=False, bootstrap=True, warm_start=False, n_jobs=None, random_state=None)


   Bases: :class:`wildboar.ensemble._ensemble.BaseShapeletForestRegressor`

   An ensemble of extremely random shapelet trees for time series regression.

   .. rubric:: Examples

   >>> from wildboar.ensemble import ExtraShapeletTreesRegressor
   >>> from wildboar.datasets import load_synthetic_control
   >>> x, y = load_synthetic_control()
   >>> f = ExtraShapeletTreesRegressor(n_estimators=100, metric='scaled_euclidean')
   >>> f.fit(x, y)
   >>> y_hat = f.predict(x)


.. class:: ShapeletForestEmbedding(n_estimators=100, *, n_shapelets=1, max_depth=5, min_samples_split=2, min_shapelet_size=0, max_shapelet_size=1, metric='euclidean', metric_params=None, bootstrap=True, warm_start=False, n_jobs=None, sparse_output=True, random_state=None)


   Bases: :class:`wildboar.ensemble._ensemble.BaseShapeletForestRegressor`

   An ensemble of random shapelet trees

   An unsupervised transformation of a time series dataset
   to a high-dimensional sparse representation. A time series i
   indexed by the leaf that it falls into. This leads to a binary
   coding of a time series with as many ones as trees in the forest.

   The dimensionality of the resulting representation is
   ``<= n_estimators * 2^max_depth``

   .. method:: fit(self, x, y=None, sample_weight=None, check_input=True)

      Fit a random shapelet forest regressor


   .. method:: fit_transform(self, x, y=None, sample_weight=None, check_input=True)


   .. method:: transform(self, x)



.. class:: IsolationShapeletForest(*, n_estimators=100, bootstrap=False, n_jobs=None, min_shapelet_size=0, max_shapelet_size=1, min_samples_split=2, max_samples='auto', contamination='auto', contamination_set='training', warm_start=False, metric='euclidean', metric_params=None, random_state=None)


   Bases: :class:`wildboar.ensemble._ensemble.ShapeletForestMixin`, :class:`sklearn.base.OutlierMixin`, :class:`sklearn.ensemble._bagging.BaseBagging`

   A isolation shapelet forest.

   .. versionadded:: 0.3.5

   .. attribute:: offset_

      The offset for computing the final decision

      :type: float

   .. rubric:: Examples

   >>> from wildboar.ensemble import IsolationShapeletForest
   >>> from wildboar.datasets import load_two_lead_ecg
   >>> from model_selection.outlier import train_test_split
   >>> from sklearn.metrics import balanced_accuracy_score
   >>> x, y = load_two_lead_ecg("two_lead_ecg")
   >>> x_train, x_test, y_train, y_test = train_test_split(x, y, 1, test_size=0.2, anomalies_train_size=0.05)
   >>> f = IsolationShapeletForest(n_estimators=100, contamination=balanced_accuracy_score)
   >>> f.fit(x_train, y_train)
   >>> y_pred = f.predict(x_test)
   >>> balanced_accuracy_score(y_test, y_pred)

   Or using default offset threshold

   >>> from wildboar.ensemble import IsolationShapeletForest
   >>> from wildboar.datasets import load_two_lead_ecg
   >>> from model_selection.outlier import train_test_split
   >>> from sklearn.metrics import balanced_accuracy_score
   >>> f = IsolationShapeletForest()
   >>> x, y = load_two_lead_ecg("two_lead_ecg")
   >>> x_train, x_test, y_train, y_test = train_test_split(x, y, 1, test_size=0.2, anomalies_train_size=0.05)
   >>> f.fit(x_train)
   >>> y_pred = f.predict(x_test)
   >>> balanced_accuracy_score(y_test, y_pred)

   .. method:: fit(self, x, y=None, sample_weight=None, check_input=True)


   .. method:: predict(self, x)


   .. method:: decision_function(self, x)


   .. method:: score_samples(self, x)



