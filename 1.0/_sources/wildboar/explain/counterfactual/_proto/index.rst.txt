:orphan:

:mod:`wildboar.explain.counterfactual._proto`
=============================================

.. py:module:: wildboar.explain.counterfactual._proto


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   wildboar.explain.counterfactual._proto.PrototypeCounterfactual
   wildboar.explain.counterfactual._proto.TargetEvaluator
   wildboar.explain.counterfactual._proto.PredictEvaluator
   wildboar.explain.counterfactual._proto.ProbabilityEvaluator
   wildboar.explain.counterfactual._proto.PrototypeSampler
   wildboar.explain.counterfactual._proto.UniformPrototypeSampler
   wildboar.explain.counterfactual._proto.KNearestPrototypeSampler
   wildboar.explain.counterfactual._proto.ShapeletPrototypeSampler
   wildboar.explain.counterfactual._proto.KNearestShapeletPrototypeSampler
   wildboar.explain.counterfactual._proto.MetricTransform
   wildboar.explain.counterfactual._proto.EuclideanTransform
   wildboar.explain.counterfactual._proto.DynamicTimeWarpTransform



.. class:: PrototypeCounterfactual(background_x, background_y, *, metric='euclidean', metric_params=None, max_iter=100, step_size=0.1, n_prototypes='auto', target='auto', method='sample', method_params=None, random_state=None)


   Bases: :class:`wildboar.explain.counterfactual.base.BaseCounterfactual`

   Model agnostic approach for constructing counterfactual explanations

   .. attribute:: estimator_

      The estimator for which counterfactuals are computed

      :type: object

   .. attribute:: classes_

      The classes

      :type: ndarray

   .. attribute:: partitions_

      Dictionary of classes and PrototypeSampler

      :type: dict

   .. attribute:: target_

      The target evaluator

      :type: TargetEvaluator

   .. rubric:: References

   Samsten, Isak (2020).
       Model agnostic time series counterfactuals

   .. method:: fit(self, estimator)


   .. method:: transform(self, x, y)



.. class:: TargetEvaluator(estimator)


   Bases: :class:`abc.ABC`

   Evaluate if a sample is a counterfactual

   .. method:: is_counterfactual(self, x, y)

      Return true if x is a counterfactual of label y

      :param x: The counterfactual sample
      :type x: ndarray of shape (n_samples, n_timestep) or (n_timestep,)
      :param y: The counterfactual label
      :type y: object

      :returns: **bool**
      :rtype: true if counterfactual



.. class:: PredictEvaluator(estimator)


   Bases: :class:`wildboar.explain.counterfactual._proto.TargetEvaluator`

   Evaluate if a counterfactual is predicted as y


.. class:: ProbabilityEvaluator(estimator, probability=0.5)


   Bases: :class:`wildboar.explain.counterfactual._proto.TargetEvaluator`

   Evaluate if the probability of a counterfactual is at least a given constant


.. class:: PrototypeSampler(x, y, n_prototypes, metric_transform, random_state)


   Bases: :class:`abc.ABC`

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. method:: sample(self, o)
      :abstractmethod:

      Sample an example

      :param o: The current counterfactual sample
      :type o: ndarray of shape (n_timestep,)

      :returns: **prototype** -- A prototype of the counterfactual label
      :rtype: ndarray of shape (n_timestep,)


   .. method:: move(self, o, p)

      Move the current counterfactual toward the prototype

      :param o: The current counterfactual sample
      :type o: ndarray of shape (n_timestep,)
      :param p: The prototype of the counterfactual label
      :type p: ndarray of shape (n_timestep,)

      :returns: **new_counterfactual** -- The new counterfactual moved towards the prototype
      :rtype: ndarray of shape (n_timestep,)


   .. method:: sample_move(self, o)

      Sampla a prototype and move the counterfactual towards the prototype

      :param o: The current counterfactual sample
      :type o: ndarray of shape (n_timestep,)

      :returns: **new_counterfactual** -- The new counterfactual moved towards the prototype
      :rtype: ndarray of shape (n_timestep,)



.. class:: UniformPrototypeSampler(x, y, n_prototypes, metric_transform, random_state)


   Bases: :class:`wildboar.explain.counterfactual._proto.PrototypeSampler`

   Sample a prototype uniformly at random from the initial prototype sample

   .. method:: sample(self, _o)

      Sample an example

      :param o: The current counterfactual sample
      :type o: ndarray of shape (n_timestep,)

      :returns: **prototype** -- A prototype of the counterfactual label
      :rtype: ndarray of shape (n_timestep,)



.. class:: KNearestPrototypeSampler(x, y, n_prototypes, metric_transform, random_state)


   Bases: :class:`wildboar.explain.counterfactual._proto.PrototypeSampler`

   Sample a prototype among the samples closest to the current counterfactual

   .. method:: nearest_index(self, o)

      Return the index of the closest sample

      :param o: The current counterfactual sample
      :type o: ndarray of shape (n_timestep,)

      :returns: **int**
      :rtype: an index


   .. method:: sample(self, o)

      Sample an example

      :param o: The current counterfactual sample
      :type o: ndarray of shape (n_timestep,)

      :returns: **prototype** -- A prototype of the counterfactual label
      :rtype: ndarray of shape (n_timestep,)



.. class:: ShapeletPrototypeSampler(x, y, n_prototypes, metric_transform, random_state, min_shapelet_size=0, max_shapelet_size=1)


   Bases: :class:`wildboar.explain.counterfactual._proto.PrototypeSampler`

   Sample shapelet prototypes

   .. method:: sample_shapelet(self, p)

      Sample a shapelet from x

      :param p: The prototype sample
      :type p: ndarray of shape (n_timestep,)

      :returns: **shapelet** -- A shapelet
      :rtype: ndarray


   .. method:: sample(self, _o)

      Sample an example

      :param o: The current counterfactual sample
      :type o: ndarray of shape (n_timestep,)

      :returns: **prototype** -- A prototype of the counterfactual label
      :rtype: ndarray of shape (n_timestep,)


   .. method:: move(self, o, p)

      Move the best matching shapelet of the  counterfactual sample towards
      the shapelet prototype

      :param o: The counterfactual sample
      :type o: ndarray of shape (n_timestep,)
      :param p: The prototype shapelet
      :type p: ndarray

      :returns: **new_counterfactual** -- The new counterfactual moved towards the prototype
      :rtype: ndarray of shape (n_timestep,)



.. class:: KNearestShapeletPrototypeSampler(x, y, n_prototypes, metric_transform, random_state, min_shapelet_size=0, max_shapelet_size=1)


   Bases: :class:`wildboar.explain.counterfactual._proto.PrototypeSampler`

   Combines the KNearestPrototypeSample and the ShapeletPrototypeSampler
   such that prototype samples are sampled among the nearest neighbors of the
   counterfactual

   .. method:: sample(self, o)

      Sample an example

      :param o: The current counterfactual sample
      :type o: ndarray of shape (n_timestep,)

      :returns: **prototype** -- A prototype of the counterfactual label
      :rtype: ndarray of shape (n_timestep,)


   .. method:: move(self, o, p)

      Move the current counterfactual toward the prototype

      :param o: The current counterfactual sample
      :type o: ndarray of shape (n_timestep,)
      :param p: The prototype of the counterfactual label
      :type p: ndarray of shape (n_timestep,)

      :returns: **new_counterfactual** -- The new counterfactual moved towards the prototype
      :rtype: ndarray of shape (n_timestep,)



.. class:: MetricTransform(gamma)


   Bases: :class:`abc.ABC`

   Move a time series towards a prototype

   .. method:: move(self, o, p)
      :abstractmethod:

      Move the sample o towards p

      :param o: An array
      :type o: ndarray of shape (n_timestep,)
      :param p: An array
      :type p: ndarray of shape (n_timestep,)

      :returns: **ndarray**
      :rtype: an array



.. class:: EuclideanTransform(gamma)


   Bases: :class:`wildboar.explain.counterfactual._proto.MetricTransform`

   Transform a sample by moving it closer in euclidean space

   .. method:: move(self, o, p)

      Move the sample o towards p

      :param o: An array
      :type o: ndarray of shape (n_timestep,)
      :param p: An array
      :type p: ndarray of shape (n_timestep,)

      :returns: **ndarray**
      :rtype: an array



.. class:: DynamicTimeWarpTransform(gamma, r=1.0)


   Bases: :class:`wildboar.explain.counterfactual._proto.MetricTransform`

   Transform a sample by moving it closer using the dtw alignment matrix

   .. method:: move(self, o, p)

      Move the sample o towards p

      :param o: An array
      :type o: ndarray of shape (n_timestep,)
      :param p: An array
      :type p: ndarray of shape (n_timestep,)

      :returns: **ndarray**
      :rtype: an array



